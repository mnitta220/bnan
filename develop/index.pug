doctype html
html
  head
    meta(charset="utf-8")
    meta(name="viewport" content="width=device-width, initial-scale=1")
    title 開発情報 - 文章暗記
    link(rel="stylesheet" href="../css/themes/default/jquery.mobile-1.4.5.min.css")
    link(rel="stylesheet" href="../assets/css/jqm-demos.css")
    link(rel="stylesheet" href="../css/style.css")
    script(src="../js/jquery.js")
    script(src="../assets/js/index.js")
    script(src="../js/jquery.mobile-1.4.5.min.js")
  body#ui-page-top
    .jqm-demos(data-role="page")
      .jqm-header(data-role="header")
        h2
          a(href="../" title="jQuery Mobile Demos home")
            img(src="../img/icon3.png")
        p
          | 開発情報
        a.jqm-navmenu-link.ui-btn.ui-btn-icon-notext.ui-corner-all.ui-icon-bars.ui-nodisc-icon.ui-alt-icon.ui-btn-left(href="#") Menu
      .ui-content.jqm-content(role="main")
        p
          | このページには、アプリの開発者向けに、「
          a(href="https://mnitta220.github.io/bnan/") 文章暗記
          | 」の開発情報を記述します。
        br
        ul
          li
            a(href="#c1") ソースコード
          li
            a(href="#c2") アプリの構成
          li
            a(href="#c3") 文章暗記 ionic プロジェクト
          li
            a(href="#c4") 文章暗記 WebAssembly プロジェクト
          li
            a(href="#c5") 開発手順
        br
        hr
        h2#c1 ソースコード
        p
          | 次の２つの
          | GitHubリポジトリで、「文章暗記」のソースコードを公開しています。
        ul.jqm-demos
          li
            | 文章暗記 ionic プロジェクト
            br
            a(href="https://github.com/mnitta220/bnan" target="_blank") https://github.com/mnitta220/bnan
          li
            | 文章暗記 WebAssembly プロジェクト
            br
            a(href="https://github.com/mnitta220/bnanw" target="_blank") https://github.com/mnitta220/bnanw
        p
          | ionic, TypeScript, WebAssembly, Rust をお使いになる技術者の方に、サンプルプロジェクトとしてご参照いただけるかと思います。
        br
        br
        a(href="#ui-page-top" class="jqm-deeplink ui-icon-carat-u ui-alt-icon") Top
        hr
        h2#c2 アプリの構成
        p
          | このアプリは、ionic(TypeScript) と WebAssembly(Rust) が連携する構成で作られています。
        p
          | アプリのフレームワークとして、「
          a(href="https://ionicframework.com/" target="_blank") Ionic Framework
          | 」(＋
          a(href="https://angular.io/" target="_blank") Angular
          | )
          |  を使用しています。この開発言語は&nbsp;
          a(href="https://www.typescriptlang.org/" target="_blank") TypeScript
          |  です。
        p
          | アプリの主要な機能は、登録されたテキストを指示に従って表示することです。
          br
          | 入力されたテキストを解析して、黒塗り、横書き／縦書き、目次表示、ルビ振りなどの描画を行います。これらの解析と描画を、
          a(href="https://www.rust-lang.org/" target="_blank") Rust
          |  という開発言語でプログラミングしています。
          br
          | テキストの解析結果は、
          a(href="https://developer.mozilla.org/ja/docs/WebAssembly" target="_blank") WebAssembly
          |  によって、HTMLの
          a(href="http://defghi1977.html.xdomain.jp/tech/canvasMemo/canvasMemo.htm" target="_blank") canvas要素に描画
          | しています。
        p
          | 次の画像の、赤枠内が canvasになっており、その描画処理を WebAssembly で行っています。
        p
          img.img1(src="../img/fig04.png" width="260px")
        p
          | このような構成としたのは、テキストの解析と描画には、高速な処理が必要となるからです。
          br
          | TypeScript(JavaScript) のようなスクリプト言語は、開発の容易さでは優れていますが、負荷が掛かる重たい処理には向いていません。WebAssembly + Rust ならば、高速な処理が可能です。
        br
        br
        a(href="#ui-page-top" class="jqm-deeplink ui-icon-carat-u ui-alt-icon") Top
        hr
        h2#c3
          a(href="https://github.com/mnitta220/bnan" target="_blank") 文章暗記 ionic プロジェクト
        h3 IndexedDB
        p
          | アプリで登録された文書のデータは、
          a(href="https://developer.mozilla.org/ja/docs/Web/API/IndexedDB_API" target="_blank") IndexedDB
          |  に保持します。TypeScript で IndexedDB
          |  を操作するためのライブラリとして、
          a(href="https://dexie.org/" target="_blank") Dexie.js
          |  を使用しています。
        p
          | 次のソースで、Dexie.js による IndexedDB の定義をしています。
          br
          a(href="https://github.com/mnitta220/bnan/blob/master/src/app/common/idb.ts" target="_blank") /src/app/common/idb.ts
        p テーブルの内容は、次の通りです。
        table.tb1
          tr
            th テーブル
            th 内容
          tr
            td Doc
            td 文書のタイトルなどの基本情報を保持する。
          tr
            td Contents
            td 文書の行単位の情報を保持する。
        p
          | たとえば、1つの文書の中に10行あった場合、Docが1レコード、Contentsが10レコード作成されます。
          br
          | 文書が更新された場合、バージョン番号を1加算し、旧バージョンのContentsをすべて削除して、新バージョンのContentsを出力します。
        br
        h3 Tips
        ul.jqm-demos
          li
            a(href="https://github.com/mnitta220/bnan/blob/master/package.json" target="_blank") package.json
            | ファイルの "dependencies" に、
            br
            | "bnanw": "file:../bnanw/pkg"
            br
            | と設定することによって(32行目)、「文章暗記 WebAssembly プロジェクト」が出力した WebAssembly のコードを参照しています。
          li
            | 表示される広告は、
            a(href="https://admob.google.com/intl/ja_ALL/home/" target="_blank") AdMob
            |  から配信されています。ionic で AdMob
            |  を使用するためのライブラリとして、
            a(href="https://www.npmjs.com/package/@capacitor-community/admob" target="_blank") @capacitor-community/admob
            |  を使用しています。
          li
            | 広告解除のアプリ内課金を行うためのライブラリとして、
            a(href="https://github.com/j3k0/cordova-plugin-purchase" target="_blank") Cordova Purchase Plugin
            |  を使用しています。
        br
        br
        a(href="#ui-page-top" class="jqm-deeplink ui-icon-carat-u ui-alt-icon") Top
        hr
        h2#c4
          a(href="https://github.com/mnitta220/bnanw" target="_blank") 文章暗記 WebAssembly プロジェクト
        p
          | Rust と WebAssembly の橋渡しをするためのライブラリとして、
          a(href="https://github.com/rustwasm/wasm-bindgen" target="_blank") wasm-bindgen
          |  を使用しています。
        p
          | ionic の TypeScript から WebAssembly
          | のコードを呼び出すエントリポイントは、
          br
          a(href="https://github.com/mnitta220/bnanw/blob/master/src/lib.rs" target="_blank") /src/lib.rs
          br
          | にあります。
          br
          | lib.rs 内の以下の関数がエントリポイントになっています。
        table.tb1
          tr
            th 関数
            th 処理名／イベント
          tr
            td ping
            td 疎通確認
          tr
            td load_font
            td Googleフォントロード処理
          tr
            td set_doc
            td 文書をセットする
          tr
            td set_source
            td 文書の行をセットする
          tr
            td draw_doc
            td 文書を表示する
          tr
            td resize
            td キャンバスサイズが変更された
          tr
            td contents_change
            td 本文/目次が切り替えられた
          tr
            td touch_start
            td タッチが開始された
          tr
            td touch_move
            td タッチが移動された
          tr
            td touch_end
            td タッチが終了した
          tr
            td mode_change
            td 黒塗りモードが変更された
          tr
            td black_step
            td ツールボタンが押された
        p
          | ほとんどの関数は、ユーザーの操作によるイベントの発生を通知するために実行されます。
        br
        h3 Tips
        ul.jqm-demos
          li
            | Androidのスマホ、タブレットには、明朝体(セリフ体)のフォントが入っていません。このため、アプリ内にフォントのファイルを持たせ、そのフォントで文字を描画しています。「
            a(href="https://fonts.google.com/" target="_blank") Google Fonts
            | 」で配布されている「
            a(href="https://fonts.google.com/specimen/Noto+Serif+JP" target="_blank") Noto Serif JP
            | 」というフォントの「NotoSerifJP-Regular.otf」というファイルを、次の場所に入れています。
            br
            | /resources/NotoSerifJP-Regular.otf
            br
            | Androidのビルド時に、このファイルを
            br
            | /src/assets/font/
            br
            | にコピーしてアプリと一緒に配布し、アプリの実行時に読み込んでいます。
            br
            | iOSには、明朝体(セリフ体)のフォントが入っているので、アプリ内に「NotoSerifJP-Regular.otf」を入れていません。
        br
        br
        a(href="#ui-page-top" class="jqm-deeplink ui-icon-carat-u ui-alt-icon") Top
        hr
        h2#c5 開発手順
        p
          | 「文章暗記」のリポジトリをご自分のPCに複製して、開発を行う手順は次の通りです。
        ol.jqm-demos
          li
            | 以下のツールの中で、インストールされていないものがあれば、インストールしてください。
            ul
              li
                a(href="https://git-scm.com/" target="_blank") git
              li
                a(href="https://nodejs.org/ja/" target="_blank") Node.js
              li
                a(href="https://ionicframework.com/" target="_blank") Ionic Framework
              li
                a(href="https://www.rust-lang.org/" target="_blank") Rust
            br
          li
            | 「文章暗記」用のディレクトリを作成し、そのディレクトリにリポジトリを
            | git clone してください。
            .box1
              | mkdir bnan
              br
              | cd bnan
              br
              | git clone https://github.com/mnitta220/bnan
              br
              | git clone https://github.com/mnitta220/bnanw
            br
          li
            | [初回のみ]
            br
            | 次のコマンドを実行してください。
            .box1
              | cargo install wasm-pack
            br
          li
            | 次のコマンドで、WebAssembly のビルドを実行してください。
            .box1
              | cd bnanw
              br
              | wasm-pack build
            br
          li
            | [初回のみ]
            br
            | 次のコマンドを実行してください。
            .box1
              | cd ../bnan
              br
              | npm install
              br
              | ionic build --prod
            br
          li
            | 次のコマンドを実行すると、Webブラウザが起動して、「文章暗記」の画面が表示されます。
            .box1
              | ionic serve
            | 起動したブラウザが Safari で、メニューの選択がうまくできない場合は、他のブラウザで実行してください。
            .box1
              | [Google Chrome の場合]
              br
              | ionic serve --browser="google chrome"
              br
              | [Firefox の場合]
              br
              | ionic serve --browser="firefox"
            br
          li
            | iOS の場合は&nbsp;
            a(href="https://apps.apple.com/jp/app/xcode/id497799835?mt=12" target="_blank") XCode
            |  で、Android の場合は&nbsp;
            a(href="https://developer.android.com/studio" target="_blank") Android Studio
            |  で、パッケージング、動作確認、配布を行います。
            br
            | その方法については、ionicのドキュメントや書籍などをご参照ください。
        br
        p
        .box2
          | ※ 不具合や改善点を見つけられた場合は、作者にご連絡いただければ幸いです。
        br
        a(href="#ui-page-top" class="jqm-deeplink ui-icon-carat-u ui-alt-icon") Top
        br
        br
      .jqm-navmenu-panel(data-role="panel" data-position="left" data-display="overlay" data-theme="a")
        ul.jqm-list.ui-alt-icon.ui-nodisc-icon
          li(data-filtertext="demos homepage" data-icon="home")
            a(href=".././") Home
          li(data-filtertext="introduction overview getting started")
            a(href="../develop/" data-ajax="false") 開発情報
      .jqm-footer(data-role="footer" data-position="fixed" data-tap-toggle="false")
        p
          | Copyright © 2020 Masahiro Nitta.  -&nbsp;
          a(href="../privacy/" data-ajax="false") Privacy
        p
      .jqm-search-panel(data-role="panel" data-position="right" data-display="overlay" data-theme="a")
        .jqm-search
          ul.jqm-list(data-filter-placeholder="Search demos..." data-filter-reveal="true")
            li(data-filtertext="demos homepage" data-icon="home")
              a(href=".././") Home
            li(data-filtertext="introduction overview getting started")
              a(href="../develop/" data-ajax="false") 開発情報
